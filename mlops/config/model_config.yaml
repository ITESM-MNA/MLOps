models:
  Logistic Regression:
    class: sklearn.linear_model.LogisticRegression
    hyperparameters:
      C: [0.1, 1, 10]
      solver: ['liblinear', 'saga']
      class_weight: ['balanced']
      max_iter: [100, 200, 500, 1000]

  Random Forest:
    class: sklearn.ensemble.RandomForestClassifier
    hyperparameters:
      n_estimators: [50, 100, 200]
      max_depth: [5, 10, null]
      min_samples_split: [2, 5]
      min_samples_leaf: [1, 2]
      class_weight: ['balanced', 'balanced_subsample']

  Extra Trees:
    class: sklearn.ensemble.ExtraTreesClassifier
    hyperparameters:
      n_estimators: [50, 100, 200]
      max_depth: [5, 10, null]
      min_samples_split: [2, 5]
      min_samples_leaf: [1, 2]
      class_weight: ['balanced', 'balanced_subsample']

  AdaBoost:
    class: sklearn.ensemble.AdaBoostClassifier
    hyperparameters:
      n_estimators: [50, 100, 200]
      learning_rate: [0.01, 0.1, 1]
      algorithm: ['SAMME', 'SAMME.R']

  Gradient Boosting:
    class: sklearn.ensemble.GradientBoostingClassifier
    hyperparameters:
      n_estimators: [50, 100, 200]
      learning_rate: [0.01, 0.1, 1]
      max_depth: [3, 5, 7]
      min_samples_split: [2, 5]
      min_samples_leaf: [1, 2]

  Decision Tree:
    class: sklearn.tree.DecisionTreeClassifier
    hyperparameters:
      max_depth: [5, 10, null]
      min_samples_split: [2, 5]
      min_samples_leaf: [1, 2]
      class_weight: ['balanced']

  SVM:
    class: sklearn.svm.SVC
    hyperparameters:
      C: [0.1, 1, 10]
      kernel: ['linear', 'rbf']
      gamma: ['scale', 'auto']
      class_weight: ['balanced']
      probability: [true]

training:
  test_size: 0.3
  random_state: 42
  cv_folds: 5